service: filejob
frameworkVersion: '2'

plugins:
  - serverless-plugin-typescript
  - serverless-step-functions

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  timeout: 3
  memorySize: 128
  stage: dev
  region: us-east-1

  apiGateway:
    apiKeys:
      - testKey
    usagePlan:
      throttle:
        burstLimit: 5
        rateLimit: 3

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:CopyObject
        - s3:DeleteObject
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:Query
        - dynamodb:Scan
      Resource: !GetAtt JobsTable.Arn
    - Effect: Allow
      Action:
        - events:PutRule
        - events:PutTargets
        - events:DeleteRule
        - events:RemoveTargets
        - events:ListTargetsByRule
      Resource: '*'
    - Effect: Allow
      Action:
        - iam:PassRole
      Resource:
        - !GetAtt EventBridgeRole.Arn

functions:
  StartJob:
    handler: src/lambdas/StartJob.handler
    role: !GetAtt StepFunctionsRole.Arn
    environment:
      JOBSTABLE: !Ref JobsTable
      JOBSBUCKET: !Ref JobsBucket
    
  RunJobSteps:
    handler: src/lambdas/RunJobSteps.handler
    timeout: 120
    memorySize: 512
    role: !GetAtt StepFunctionsRole.Arn

  StopJob:
    handler: src/lambdas/StopJob.handler
    role: !GetAtt StepFunctionsRole.Arn


  CatchError:
    handler: src/lambdas/CatchError.handler
    role: !GetAtt StepFunctionsRole.Arn

  ValidateJob:
    handler: src/lambdas/ValidateJob.handler
    events:
      - sqs:
          arn: !GetAtt ValidationQueue.Arn
          batchSize: 10
          maximumBatchingWindow: 30
          
    environment:
      JOBSTABLE: !Ref JobsTable
      JOBSBUCKET: !Ref JobsBucket


  CreateJob:
    handler: src/lambdas/CreateJob.handler
    events:
      - http:
          path: /job
          method: post
          private: true
          cors: true
    environment:
      JOBRUNNERSM: !Ref JobRunnerStateMachine
      EBROLE: !GetAtt EventBridgeRole.Arn
      JOBSTABLE: !Ref JobsTable
      JOBSBUCKET: !Ref JobsBucket

  GetJob:
    handler: src/lambdas/GetJob.handler
    events:
      - http:
          path: /job/{id}
          method: get
          private: true
          cors: true
    environment:
      JOBSTABLE: !Ref JobsTable
      JOBSBUCKET: !Ref JobsBucket

  UpdateJob:
    handler: src/lambdas/UpdateJob.handler
    events:
      - http:
          path: /job/{id}
          method: put
          private: true
          cors: true
    environment:
      JOBRUNNERSM: !Ref JobRunnerStateMachine
      EBROLE: !GetAtt EventBridgeRole.Arn
      JOBSTABLE: !Ref JobsTable
      JOBSBUCKET: !Ref JobsBucket

  DeleteJob:
    handler: src/lambdas/DeleteJob.handler
    events:
      - http:
          path: /job/{id}
          method: delete
          private: true
          cors: true
    environment:
      JOBSTABLE: !Ref JobsTable
      JOBSBUCKET: !Ref JobsBucket

  QueryJobs:
    handler: src/lambdas/QueryJobs.handler
    events:
      - http:
          path: /jobs
          method: get
          private: true
          cors: true
    environment:
      JOBSTABLE: !Ref JobsTable
      JOBSBUCKET: !Ref JobsBucket

stepFunctions:
  stateMachines:
    jobRunnerStateMachine:
      id: JobRunnerStateMachine
      name: ${self:service}-${self:provider.stage}-jobrunner
      definition:
        StartAt: startJob
        States:
          startJob:
            Type: Task
            Resource: !GetAtt StartJob.Arn
            ResultPath: $.job
            Next: runJobSteps
          runJobSteps:
            Type: Task
            Resource: !GetAtt RunJobSteps.Arn
            ResultPath: $.job
            Next: choiceStep
            Catch:
              - ErrorEquals: ['States.ALL']
                Next: catchError
          stopJob:
            Type: Task
            Resource: !GetAtt StopJob.Arn
            ResultPath: $.job
            End: true
          choiceStep:
            Type: Choice
            Choices:
              - Variable: $.job.current
                NumericLessThanPath: $.job.stepCount
                Next: runJobSteps
            Default: stopJob
          catchError:
            Type: Task
            Resource: !GetAtt CatchError.Arn
            End: true

resources:
  Resources:
    JobsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-jobs
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE

    JobsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-jobs
        NotificationConfiguration:
          QueueConfigurations:
            - Event: s3:ObjectCreated:*
              Queue: !GetAtt ValidationQueue.Arn

    ValidationQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-validationqueue

    QueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: s3.amazonaws.com
              Action:
                - SQS:SendMessage
              Resource: !GetAtt ValidationQueue.Arn
              # Condition:
                # ArnLike: {"aws:SourceArn": !GetAtt JobsBucket.Arn}
        Queues:
          - !Ref ValidationQueue

    EventBridgeRole:
      Type: AWS::IAM::Role
      Properties: 
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action:
              - sts:AssumeRole
        Policies: 
          - PolicyName: ${self:service}-${self:provider.stage}-eventbridgerole
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - states:StartExecution
                  Resource: !Ref JobRunnerStateMachine

    StepFunctionsRole:
      Type: AWS::IAM::Role
      Properties: 
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
        Policies: 
          - PolicyName: FileJobScheduler-stepfunctionsrole
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                    - s3:DeleteObject
                    - s3:CopyObject
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                    - dynamodb:Query
                  Resource: !GetAtt JobsTable.Arn