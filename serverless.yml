service: filejob
frameworkVersion: '2'

plugins:
  - serverless-plugin-typescript
  - serverless-step-functions

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  timeout: 3
  memorySize: 128
  stage: dev
  region: us-east-1

  apiGateway:
    apiKeys:
      - testKey
    usagePlan:
      throttle:
        burstLimit: 5
        rateLimit: 3

  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:CopyObject
        - s3:DeleteObject
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:Query
        - dynamodb:Scan
      Resource: !GetAtt JobsTable.Arn

  environment:
    JOBSTABLE: !Ref JobsTable
    JOBSBUCKET: !Ref JobsBucket

functions:
  StartJob:
    handler: src/lambdas/StartJob.handler
  RunJobSteps:
    handler: src/lambdas/RunJobSteps.handler
    timeout: 120
    memorySize: 512
  StopJob:
    handler: src/lambdas/StopJob.handler
  CatchError:
    handler: src/lambdas/CatchError.handler

  CreateJob:
    handler: src/lambdas/CreateJob.handler
    events:
      - http:
          path: /job
          method: post
          private: true
          cors: true

  GetJob:
    handler: src/lambdas/GetJob.handler
    events:
      - http:
          path: /job/{id}
          method: get
          private: true
          cors: true

  UpdateJob:
    handler: src/lambdas/UpdateJob.handler
    events:
      - http:
          path: /job/{id}
          method: put
          private: true
          cors: true

  DeleteJob:
    handler: src/lambdas/DeleteJob.handler
    events:
      - http:
          path: /job/{id}
          method: delete
          private: true
          cors: true

  QueryJobs:
    handler: src/lambdas/QueryJobs.handler
    events:
      - http:
          path: /jobs
          method: get
          private: true
          cors: true

stepFunctions:
  stateMachines:
    jobRunnerStateMachine:
      id: JobRunnerStateMachine
      name: ${self:service}-${self:provider.stage}-jobrunner
      definition:
        StartAt: startJob
        States:
          startJob:
            Type: Task
            Resource: !GetAtt StartJob.Arn
            ResultPath: $.job
            Next: runJobSteps
          runJobSteps:
            Type: Task
            Resource: !GetAtt RunJobSteps.Arn
            ResultPath: $.job
            Next: choiceStep
            Catch:
              - ErrorEquals: ['States.ALL']
                Next: catchError
          stopJob:
            Type: Task
            Resource: !GetAtt StopJob.Arn
            ResultPath: $.job
            End: true
          choiceStep:
            Type: Choice
            Choices:
              - Variable: $.job.current
                NumericLessThanPath: $.job.stepCount
                Next: runJobSteps
            Default: stopJob
          catchError:
            Type: Task
            Resource: !GetAtt CatchError.Arn
            End: true

resources:
  Resources:
    JobsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-jobs
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE

    JobsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-jobs